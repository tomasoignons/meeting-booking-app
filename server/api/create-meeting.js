import { defineEventHandler, readBody } from 'h3';
import nodemailer from 'nodemailer';
import axios from 'axios';
import jwt from 'jsonwebtoken';
import { createClient } from '@supabase/supabase-js';

// Service account credentials (import or require from a config file if needed)
const serviceAccount = {
  type: "service_account",
  project_id: process.env.GOOGLE_PROJECT_ID,
  private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID,
  private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'), // Ensure newlines are correctly formatted
  client_email: process.env.GOOGLE_CLIENT_EMAIL,
  token_uri: process.env.GOOGLE_TOKEN_URI,
};
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  { db: { schema: "meetings"}}
);

async function getAccessToken() {
  const payload = {
    iss: serviceAccount.client_email,
    scope: 'https://www.googleapis.com/auth/calendar',
    aud: serviceAccount.token_uri,
    exp: Math.floor(Date.now() / 1000) + 3600,
    iat: Math.floor(Date.now() / 1000),
  };

  const token = jwt.sign(payload, serviceAccount.private_key, { algorithm: 'RS256' });

  const response = await axios.post(serviceAccount.token_uri, {
    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
    assertion: token,
  });

  return response.data.access_token;
}


export default defineEventHandler(async (event) => {
  const body = await readBody(event);

  // Extract meeting info
  const {
    date, time, duration, userEmail, userName, notes,
    type, location, virtualType, customLink
  } = body;

	// 1. Create Google Calendar Event
	// (Assume you have a function getGoogleAccessToken() and calendarId in .env)
	const tz = '+02:00'; // or get dynamically
	const startDateTime = `${date}T${time}:00${tz}`;

	// Parse hours and minutes from the time string
	const [hour, minute] = time.split(':').map(Number);
	const start = new Date(`${date}T${time}:00${tz}`);
	const end = new Date(start.getTime() + duration * 60000);
  console.log('Start Date:', start);
  console.log('End Date:', end);

	// Format end time as 'YYYY-MM-DDTHH:mm:ss+02:00'
	const pad = n => n.toString().padStart(2, '0');
	const endDateTime = `${end.getFullYear()}-${pad(end.getMonth() + 1)}-${pad(end.getDate())}T${pad(end.getHours())}:${pad(end.getMinutes())}:${pad(end.getSeconds())}${'+02:00'}`;

  const calendarEvent = {
    summary: `Meeting with ${userName}`,
    description: notes,
    start: { dateTime: startDateTime },
    end: { dateTime: endDateTime },
    location: type === 'presential' ? location : undefined,
  };

  let googleCalendarEventId = null;
  try {
    const accessToken = await getAccessToken();
	console.log('Creating calendar event:', calendarEvent);
  console.log('Input - date:', date, 'time:', time, 'duration:', duration);
  console.log('Calculated startDateTime:', startDateTime);
  console.log('Calculated endDateTime:', endDateTime);
  console.log('Start Date object:', new Date(startDateTime));
  console.log('End Date object:', new Date(endDateTime));
  return;
  const calendarResponse = await axios.post(
    `https://www.googleapis.com/calendar/v3/calendars/${process.env.CALENDAR_ID}/events`,
    calendarEvent,
    { headers: { Authorization: `Bearer ${accessToken}` } }
  );
	googleCalendarEventId = calendarResponse.data.id;
  } catch (err) {
  console.error('Error creating calendar event:', err.response?.data || err.message);
    throw new Error('Failed to create calendar event');
  }

  const { data, error } = await supabase
	.from('meetings')
	.insert([{
		booker_name: userName,
		booker_email: userEmail,
		start_time: start.toISOString(),
		end_time: end.toISOString(),
		duration_minutes: duration,
		google_calendar_event_id: googleCalendarEventId,
		// cancellation_token and id are generated by the DB
		// status and created_at use defaults
	}])
	.select('id, cancellation_token');
  const update_url = `${process.env.BASE_URL}/meetings/${data[0].id}`;

  if (error) {
	console.error('Error inserting meeting into Supabase:', error);
	throw new Error('Failed to book meeting');
  }
  
  // 2. Prepare email content
  let roomInfo = '';
  if (type === 'presential') {
    roomInfo = `The meeting will take place in Room: ${location}`;
  } else if (virtualType === 'conference') {
    roomInfo = customLink
      ? `Here is the link for the online meeting : ${customLink}`
      : `Here is the link for the online meeting : ${process.env.ZOOM_LINK}`;
  }

  const userMailText = `
    Good morning ${userName},
	You have successfully booked a meeting with me throught the meeting booking app.

	The meeting will take place the following date and time:
    Date: ${date}
    Time: ${time}
    Duration: ${duration} minutes

    ${roomInfo}
    ${notes ? `Notes: ${notes}` : ''}

	You can update or cancel your meeting at any time using this link: ${update_url}
  `;

  const adminMailText = `
    ${userName} has booked a meeting with you through the meeting booking app.
	Here are the details:
    Date: ${date}
    Time: ${time}
    Duration: ${duration} minutes
    ${roomInfo}
    User: ${userName} (${userEmail})
    ${notes ? `Notes: ${notes}` : ''}
  `;

  // 3. Send emails
  const transporter = nodemailer.createTransport({
    host: process.env.MAIL_HOST,
    port: process.env.MAIL_PORT,
    auth: {
      user: process.env.MAIL_USER,
      pass: process.env.MAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: process.env.MAIL_USER,
    to: userEmail,
    subject: 'Your Meeting Confirmation',
    text: userMailText,
  });

  await transporter.sendMail({
    from: process.env.MAIL_USER,
    to: process.env.MY_EMAIL,
    subject: 'New Meeting Booked',
    text: adminMailText,
  });

  return { success: true };
});

// Helper function for Google API auth (implement as needed)
async function getGoogleAccessToken() {
  // ...your JWT logic here...
}